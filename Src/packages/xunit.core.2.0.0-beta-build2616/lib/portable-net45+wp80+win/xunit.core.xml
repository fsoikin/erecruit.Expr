<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xunit.core</name>
    </assembly>
    <members>
        <member name="T:Guard">
            <summary>
            Guard class, used for guard clauses and argument validation
            </summary>
        </member>
        <member name="M:Guard.ArgumentNotNull(System.String,System.Object)">
            <summary/>
        </member>
        <member name="M:Guard.ArgumentNotNullOrEmpty(System.String,System.Collections.IEnumerable)">
            <summary/>
        </member>
        <member name="M:Guard.ArgumentValid(System.String,System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.AssertEqualityComparer`1">
            <summary>
            Default implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used by the xUnit.net equality assertions.
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.#ctor(System.Boolean,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AssertEqualityComparer`1"/> class.
            </summary>
            <param name="skipTypeCheck">Set to <c>true</c> to skip type equality checks.</param>
            <param name="innerComparer">The inner comparer to be used when the compared objects are enumerable.</param>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AssertEqualityComparerAdapter`1">
            <summary>
            A class that wraps <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to create <see cref="T:System.Collections.IEqualityComparer"/>.
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AssertEqualityComparerAdapter`1"/> class.
            </summary>
            <param name="innerComparer">The comparer that is being adapted.</param>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.Equals(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.GetHashCode(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.CollectionAttribute">
            <summary>
            Used to declare a specific test collection for a test class.
            </summary>
        </member>
        <member name="M:Xunit.CollectionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionAttribute"/> class.
            </summary>
            <param name="name">The test collection name.</param>
        </member>
        <member name="T:Xunit.CollectionBehavior">
            <summary>
            Defines the built-in behavior types for collections in xUnit.net.
            </summary>
        </member>
        <member name="F:Xunit.CollectionBehavior.CollectionPerAssembly">
            <summary>
            By default, generates a collection per assembly, and any test classes that are not
            decorated with <see cref="T:Xunit.CollectionAttribute"/> will be placed into the assembly-level
            collection.
            </summary>
        </member>
        <member name="F:Xunit.CollectionBehavior.CollectionPerClass">
            <summary>
            By default, generates a collection per test class for any test classes that are not
            decorated with <see cref="T:Xunit.CollectionAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.CollectionBehaviorAttribute">
            <summary>
            Used to declare a the default test collection behavior for the assembly.
            </summary>
        </member>
        <member name="M:Xunit.CollectionBehaviorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionBehaviorAttribute"/> class.
            </summary>
        </member>
        <member name="M:Xunit.CollectionBehaviorAttribute.#ctor(Xunit.CollectionBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionBehaviorAttribute"/> class.
            </summary>
            <param name="collectionBehavior">The collection behavior for the assembly.</param>
        </member>
        <member name="M:Xunit.CollectionBehaviorAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionBehaviorAttribute"/> class.
            </summary>
            <param name="factoryTypeName">The type name of the test collection factory (that implements <see cref="T:Xunit.Sdk.IXunitTestCollectionFactory"/>).</param>
            <param name="factoryAssemblyName">The assembly that <paramref name="factoryTypeName"/> exists in.</param>
        </member>
        <member name="P:Xunit.CollectionBehaviorAttribute.DisableTestParallelization">
            <summary>
            Determines whether tests in this assembly are run in parallel.
            </summary>
        </member>
        <member name="P:Xunit.CollectionBehaviorAttribute.MaxParallelThreads">
            <summary>
            Determines how many tests can run in parallel with each other.
            </summary>
        </member>
        <member name="T:Xunit.CollectionDefinitionAttribute">
            <summary>
            Used to declare a test collection container class. The container class gives
            developers a place to attach interfaces like <see cref="T:Xunit.IClassFixture`1"/> and
            <see cref="T:Xunit.ICollectionFixture`1"/> that will be applied to all tests classes
            that are members of the test collection.
            </summary>
        </member>
        <member name="M:Xunit.CollectionDefinitionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionDefinitionAttribute"/> class.
            </summary>
            <param name="name">The test collection name.</param>
        </member>
        <member name="T:Xunit.FactAttribute">
            <summary>
            Attribute that is applied to a method to indicate that it is a fact that should be run
            by the test runner. It can also be extended to support a customized definition of a
            test method.
            </summary>
        </member>
        <member name="P:Xunit.FactAttribute.DisplayName">
            <summary>
            Gets the name of the test to be used when the test is skipped. Defaults to
            null, which will cause the fully qualified test name to be used.
            </summary>
        </member>
        <member name="P:Xunit.FactAttribute.Skip">
            <summary>
            Marks the test so that it will not be run, and gets or sets the skip reason
            </summary>
        </member>
        <member name="T:Xunit.IClassFixture`1">
            <summary>
            Used to decorate xUnit.net test classes and collections to indicate a test which has
            per-test-class fixture data. An instance of the fixture data is initialized just before
            the first test in the class is run, and if it implements IDisposable, is disposed
            after the last test in the class is run. To gain access to the fixture data from
            inside the test, a constructor argument should be added to the test class which
            exactly matches the <typeparamref name="TFixture"/>.
            </summary>
            <typeparam name="TFixture">The type of the fixture.</typeparam>
        </member>
        <member name="T:Xunit.ICollectionFixture`1">
            <summary>
            Used to decorate xUnit.net test classes and collections to indicate a test which has
            per-test-collection fixture data. An instance of the fixture data is initialized just before
            the first test in the collection is run, and if it implements IDisposable, is disposed
            after the last test in the collection is run. To gain access to the fixture data from
            inside the test, a constructor argument should be added to the test class which
            exactly matches the <typeparamref name="TFixture"/>.
            </summary>
            <typeparam name="TFixture">The type of the fixture.</typeparam>
        </member>
        <member name="T:Xunit.InlineDataAttribute">
            <summary>
            Provides a data source for a data theory, with the data coming from inline values.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.DataAttribute">
            <summary>
            Abstract attribute which represents a data source for a data theory.
            Data source providers derive from this attribute and implement GetData
            to return the data for the theory.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DataAttribute.GetData(System.Reflection.MethodInfo)">
            <summary>
            Returns the data to be used to test the theory.
            </summary>
            <param name="testMethod">The method that is being tested</param>
            <returns>One or more sets of theory data. Each invocation of the test method
            is represented by a single object array.</returns>
        </member>
        <member name="M:Xunit.InlineDataAttribute.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.InlineDataAttribute"/> class.
            </summary>
            <param name="data">The data values to pass to the theory.</param>
        </member>
        <member name="M:Xunit.InlineDataAttribute.GetData(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.MemberDataAttribute">
            <summary>
            Provides a data source for a data theory, with the data coming from one of the following sources:
            1. A static property
            2. A static field
            3. A static method (with parameters)
            The member must return something compatible with IEnumerable&lt;object[]&gt; with the test data.
            </summary>
        </member>
        <member name="M:Xunit.MemberDataAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Creates a new instance of <see cref="T:Xunit.MemberDataAttribute"/>.
            </summary>
            <param name="memberName">The name of the public static member on the test class that will provide the test data</param>
            <param name="parameters">The parameters for the member (only supported for methods; ignored for everything else)</param>
        </member>
        <member name="M:Xunit.MemberDataAttribute.GetData(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.MemberDataAttribute.MemberName">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:Xunit.MemberDataAttribute.MemberType">
            <summary>
            Gets or sets the type to retrieve the member from. If not set, then the property will be
            retrieved from the unit test class.
            </summary>
        </member>
        <member name="P:Xunit.MemberDataAttribute.Parameters">
            <summary>
            Gets or sets the parameters passed to the member. Only supported for static methods.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.BeforeAfterTestAttribute">
            <summary>
            Base attribute which indicates a test method interception (allows code to be run before and
            after the test is run).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.BeforeAfterTestAttribute.After(System.Reflection.MethodInfo)">
            <summary>
            This method is called after the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="M:Xunit.Sdk.BeforeAfterTestAttribute.Before(System.Reflection.MethodInfo)">
            <summary>
            This method is called before the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="T:Xunit.Sdk.DataDiscovererAttribute">
            <summary>
            An attribute used to decorate classes which derive from <see cref="T:Xunit.Sdk.DataAttribute"/>,
            to indicate how data elements should be discovered.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DataDiscovererAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Xunit.Sdk.DataDiscovererAttribute"/>.
            </summary>
            <param name="typeName">The fully qualified type name of the discoverer
            (f.e., 'Xunit.Sdk.DataDiscoverer')</param>
            <param name="assemblyName">The name of the assembly that the discoverer type
            is located in, without file extension (f.e., 'xunit.execution')</param>
        </member>
        <member name="T:Xunit.Sdk.ITraitAttribute">
            <summary>
            Marker interface used by attributes which provide trait data.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestCaseDiscovererAttribute">
            <summary>
            An attribute used to decorate classes which derive from <see cref="T:Xunit.FactAttribute"/>,
            to indicate how test cases should be discovered.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseDiscovererAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Xunit.Sdk.TestCaseDiscovererAttribute"/> class.
            </summary>
            <param name="typeName">The fully qualified type name of the discoverer
            (f.e., 'Xunit.Sdk.FactDiscoverer')</param>
            <param name="assemblyName">The name of the assembly that the discoverer type
            is located in, without file extension (f.e., 'xunit.execution')</param>
        </member>
        <member name="T:Xunit.Sdk.TraitDiscovererAttribute">
            <summary>
            An attribute used to decorate classes which implement <see cref="T:Xunit.Sdk.ITraitAttribute"/>,
            to indicate how trait values should be discovered. The discoverer type must implement
            <see cref="T:Xunit.Sdk.ITraitDiscoverer"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TraitDiscovererAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Xunit.Sdk.TraitDiscovererAttribute"/>.
            </summary>
            <param name="typeName">The fully qualified type name of the discoverer
            (f.e., 'Xunit.Sdk.TraitDiscoverer')</param>
            <param name="assemblyName">The name of the assembly that the discoverer type
            is located in, without file extension (f.e., 'xunit.execution')</param>
        </member>
        <member name="T:Xunit.TestCaseOrdererAttribute">
            <summary>
            Used to decorate an assembly, test collection, or test class to allow
            the use a custom <see cref="T:Xunit.Sdk.ITestCaseOrderer"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestCaseOrdererAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCaseOrdererAttribute"/> class.
            </summary>
            <param name="ordererTypeName">The type name of the orderer class (that implements <see cref="T:Xunit.Sdk.ITestCaseOrderer"/>).</param>
            <param name="ordererAssemblyName">The assembly that <paramref name="ordererTypeName"/> exists in.</param>
        </member>
        <member name="T:Xunit.TestFrameworkAttribute">
            <summary>
            Used to decorate an assembly to allow the use a custom <see cref="T:Xunit.Sdk.ITestFramework"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestFrameworkAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Xunit.TestFrameworkAttribute"/>.
            </summary>
            <param name="typeName">The fully qualified type name of the test framework
            (f.e., 'Xunit.Sdk.XunitTestFramework')</param>
            <param name="assemblyName">The name of the assembly that the test framework type
            is located in, without file extension (f.e., 'xunit.execution')</param>
        </member>
        <member name="T:Xunit.TheoryAttribute">
            <summary>
            Marks a test method as being a data theory. Data theories are tests which are fed
            various bits of data from a data source, mapping to parameters on the test method.
            If the data source contains multiple rows, then the test method is executed
            multiple times (once with each data row). Data is provided by attributes which
            derive from <see cref="T:Xunit.Sdk.DataAttribute"/> (notably, <see cref="T:Xunit.InlineDataAttribute"/> and
            <see cref="T:Xunit.MemberDataAttribute"/>).
            </summary>
        </member>
        <member name="T:Xunit.TheoryData">
            <summary>
            Provides data for theories based on collection initialization syntax.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData.AddRow(System.Object[])">
            <summary>
            Adds a row to the theory.
            </summary>
            <param name="values">The values to be added.</param>
        </member>
        <member name="M:Xunit.TheoryData.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryData.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`1">
            <summary>
            Represents a set of data for a theory with a single parameter. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`1.Add(`0)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p">The data value.</param>
        </member>
        <member name="T:Xunit.TheoryData`2">
            <summary>
            Represents a set of data for a theory with 2 parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`2.Add(`0,`1)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
        </member>
        <member name="T:Xunit.TheoryData`3">
            <summary>
            Represents a set of data for a theory with 3 parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`3.Add(`0,`1,`2)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
        </member>
        <member name="T:Xunit.TheoryData`4">
            <summary>
            Represents a set of data for a theory with 3 parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`4.Add(`0,`1,`2,`3)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
        </member>
        <member name="T:Xunit.TheoryData`5">
            <summary>
            Represents a set of data for a theory with 3 parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`5.Add(`0,`1,`2,`3,`4)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
        </member>
        <member name="T:Xunit.TraitAttribute">
            <summary>
            Attribute used to decorate a test method with arbitrary name/value pairs ("traits").
            </summary>
        </member>
        <member name="M:Xunit.TraitAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.TraitAttribute"/> class.
            </summary>
            <param name="name">The trait name</param>
            <param name="value">The trait value</param>
        </member>
    </members>
</doc>
